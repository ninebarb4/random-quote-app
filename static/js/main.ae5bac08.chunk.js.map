{"version":3,"sources":["CardContainer.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","margin","maxWidth","position","quote","textAlign","padding","marginTop","opacity","transition","author","display","justifyContent","marginRight","footer","alignItems","marginBottom","twitter","cursor","btn","CardContainer","props","console","log","classes","useState","setQuote","setAuthor","getQuote","a","fetch","response","json","data","newQuote","content","newAuthor","useEffect","Card","className","id","CardContent","Typography","variant","component","gutterBottom","path","mdiFormatQuoteOpen","size","color","href","target","CardActions","btnPosition","Button","onClick","index","maxIndex","setColor","colorsArray","App","indexOf","length","style","background","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae5bac08.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { useState, useEffect } from 'react';\nimport TwitterIcon from '@material-ui/icons/Twitter';\nimport Icon from '@mdi/react'\nimport { mdiFormatQuoteOpen } from '@mdi/js';\n\n\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 275,\n        //minHeight: \"40vh\",\n        margin: \"0px auto\",\n        maxWidth: \"50%\",\n        position: \"relative\"\n    },\n    quote: {\n        textAlign: \"center\",\n        padding: \"0.5em\",\n        marginTop: \"1em\",\n        //trying to ease out text on change but don't think this works\n        opacity: 1,\n        transition: \"opacity 1s ease-in\"\n    },\n    /*quoteLeft: {\n        size: \"1em\"\n    },*/\n\n    author: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        marginRight: \"20px\"\n    },\n    \n    footer: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"flex-end\",\n        marginBottom: 0\n    },\n    twitter: {\n        margin: 20,\n        cursor: \"pointer\"\n    },\n\n    btn: {\n        margin: 10\n    }\n  });\n\n\nfunction CardContainer(props){\n    console.log(\"this is card props\", props);\n    const classes = useStyles();\n    const [isLoading, setIsLoading] = useState(false);\n    const [quote, setQuote] = useState(\"\");\n    const [author, setAuthor] = useState(\"\");\n\n  \n    async function getQuote(){\n        let response = await fetch(\"https://api.quotable.io/random\");\n        console.log(\"response is \", response);\n        let data = await response.json();\n        let newQuote = data.content;\n        let newAuthor = data.author;\n        setQuote(newQuote);\n        setAuthor(newAuthor);\n        \n        \n        \n    }\n   \n    //useEffect calls getQuote on page first load\n   useEffect(() => {\n        return getQuote();\n\n    }, [])\n  \n   function handleClick(){\n        getQuote();\n       console.log(\"index is\", props.index)\n       if(props.index !== props.maxIndex){\n           props.setColor(props.colorsArray[props.index + 1])\n       }else{\n           props.setColor(props.colorsArray[0])\n       }\n       \n   }\n    \n    \n    return (\n        <Card className={classes.root} id=\"quote-box\">\n            <CardContent>\n                <Typography className={classes.quote} variant=\"h5\" component=\"h2\" id=\"text\" gutterBottom>\n                    <Icon path={mdiFormatQuoteOpen} size={2}/>\n                    {quote}\n                </Typography>\n                <div className={classes.author}>\n                <Typography color=\"textSecondary\" id=\"author\">\n                    {author}\n                </Typography>\n                </div>\n            </CardContent>\n            <div className={classes.footer}>\n                <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\" target=\"_blank\">\n                    <TwitterIcon size=\"medium\" className={classes.twitter}/>\n                </a>\n                <CardActions className={classes.btnPosition}>\n                    <Button onClick={handleClick} className={classes.btn} size=\"small\" variant=\"outlined\" id=\"new-quote\">Get Quote</Button>\n                </CardActions>\n            </div>\n        </Card>\n  );\n}\n    \n\n\nexport default CardContainer;","import './App.css';\nimport ReactFCCtest from 'react-fcctest';\nimport Typography from '@material-ui/core/Typography';\nimport CardContainer from './CardContainer';\nimport { useState } from 'react';\n\nconst colorsArray = [\n  \"rgba(34, 167, 240, 0.4)\",\n  \"rgba(77, 19, 209, 0.4)\",\n  \"rgba(200, 247, 197, 0.6)\",\n  \"rgba(137, 196, 244, 0.6)\",\n  \"rgba(210, 215, 211, 0.6)\",\n  \"rgba(54, 215, 183, 0.6)\"\n]\n\n\nfunction App() {\n  const [color, setColor] = useState(colorsArray[0]);\n  let index = colorsArray.indexOf(color);\n  let maxIndex = colorsArray.length - 1;\n\n  return (\n    <div style={{background: color,\n     height: \"100vh\",\n     transition: \"background-color 1s ease-in\",\n     }}>\n      <ReactFCCtest />\n      <Typography className=\"page-header\" variant=\"h3\" component=\"h3\" gutterBottom>\n          Random Quote App\n      </Typography>\n      <div className=\"card-wrapper\">\n        <CardContainer \n        color={color} \n        setColor={setColor} \n        colorsArray={colorsArray} \n        index={index}\n        maxIndex={maxIndex}/>\n      </div>\n      <Typography color=\"textSecondary\" id=\"signature\">\n        by James\n      </Typography>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}